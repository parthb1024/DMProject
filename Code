library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
library(lubridate)
library(caret)
library(stringr)
library(DT)
library(leaflet)

melhousing <- read_csv("C:/Users/student/Downloads/Melbourne_housing_FULL.csv")

mycolors <- c("#771C19", "#AA3929", "#8E9CA3", "#556670", "#000000",
              "#E25033", "#F27314", "#F8A31B", "#E2C59F", "#B6C5CC",
              "#99CCCC","#FFCC99")

mytheme <- theme(axis.text.x = element_text(angle = 90, size = 10, vjust = .4),
                 plot.title = element_text(size = 15, vjust = 2),
                 axis.title.x = element_text(size = 12, vjust = -.35))

mytheme2 <- theme(axis.text.x = element_text(size = 10, vjust = .4),
                  plot.title = element_text(size = 15, vjust = 2),
                  axis.title.x = element_text(size = 12, vjust = -.35))

top10sub_by_houses <- melhousing %>% group_by(Suburb) %>%
  summarise(Number = n()) %>% arrange(desc(Number)) %>%
  head(10)

ggplot(top10sub_by_houses, aes(reorder(Suburb, Number), Number, fill = Suburb))+
  geom_bar(stat = "identity")+
  mytheme2+
  theme(legend.position = "none")+
  labs(x = "Suburb", y = "Number of Houses",
       title = "Top10 Suburbs by the Number of Houses")+
  scale_fill_manual(values = mycolors)+
  coord_flip()

suburb_vs_price <- melhousing[c("Suburb","Price")] %>% na.omit() #remove 2688 NA observations
top10sub_by_averprice <- suburb_vs_price %>% group_by(Suburb) %>%
  summarise(Average = sum(Price)/n()) %>%
  arrange(desc(Average)) %>% head(10)

ggplot(top10sub_by_averprice, aes(reorder(Suburb, Average), Average, fill = Suburb))+
  geom_bar(stat = "identity")+
  mytheme2+
  theme(legend.position = "none")+
  labs(x = "Suburb", y = "Average Price of House",
       title = "Top 10 Suburbs by the Average Price of House")+
  scale_fill_manual(values = mycolors)+
  coord_flip()


library(lubridate)
melhousing$Date <- dmy(as.character(melhousing$Date))
Price_Date <- melhousing[c("Suburb","Price","Date")] %>% na.omit()
averPrice_date <- Price_Date %>% group_by(Date) %>%
  summarise(Average = sum(Price)/n())

ggplot(Price_Date, aes(Date, Price))+
  geom_boxplot(aes(group = Date),color = "blue",fill = "red")+
  geom_line(aes(Date, Average), data = averPrice_date, color = "#AA3929", size = 1.3)+
  ylim(0,3000000)+mytheme2+
  labs(y = "Price", title = "Distribution of Price by Date and \n Average Price Trend in Melbourne")


pricetrend_by_top10sub <- Price_Date[Price_Date$Suburb %in% top10sub_by_averprice$Suburb,] %>%
  group_by(Suburb, Date) %>% summarise(Average = sum(Price)/n())

ggplot(pricetrend_by_top10sub, aes(Date, Average))+
  geom_line(aes(color = Suburb))+
  facet_wrap(~Suburb, nrow = 5)+
  mytheme+
  theme(legend.position = "none")+
  labs(y = "Average Price", title = "Top10 Suburb Average Price Trend")+
  scale_color_manual(values = mycolors)+
  scale_y_continuous(breaks = c(1000000,2000000,3000000,4000000),
                     labels = c("$1m","$2m","$3m","$4m"))

ggplot(Price_Date, aes(Price))+
  geom_histogram(binwidth = 100000,color = "white", fill = "#771C19")+
  mytheme2+
  scale_x_continuous(breaks = c(1000000,2000000,3000000,4000000),
                     labels = c("$1m","$2m","$3m","$4m"))+
  ggtitle("House Price Distribution in Melbourne")


price_top10subs <- Price_Date[Price_Date$Suburb %in% top10sub_by_averprice$Suburb,]

ggplot(price_top10subs, aes(Suburb, Price, fill = Suburb))+
  geom_boxplot()+
  mytheme2+ theme(legend.position = "none")+
  ggtitle("Top10 Suburbs Price Distribution")+
  coord_flip()+
  scale_fill_manual(values = mycolors)+
  scale_y_continuous(breaks = c(seq(1000000,6000000,1000000)),
                     labels = c(paste("$", 1:6, "m", sep = "")))

Suburbs = c(head(as.character(suburbData$Suburb),20))


SuburbsTop = melData %>% 
  filter(!is.na(Price)) %>% 
  filter(!is.na(Lattitude)) %>% 
  filter(!is.na(Longtitude)) %>% 
  filter(Suburb %in% Suburbs)

center_lon = median(SuburbsTop$Longtitude)
center_lat = median(SuburbsTop$Lattitude)


leaflet(SuburbsTop) %>% addTiles() %>%
  addCircles(lng = ~Longtitude, lat = ~Lattitude,radius = 3,
             color = c("red"))  %>%
  # controls
  setView(lng=center_lon, lat=center_lat, zoom=12)
  
  
roomData = melData %>% filter(!is.na(Price)) %>%
  group_by(Rooms) %>% 
  summarise(AvgPricePerRoom = round(median(Price),0)) %>%
  arrange(desc(AvgPricePerRoom))

roomData$AvgPriceRoom = scales::dollar(roomData$AvgPricePerRoom)

roomDataFull =roomData %>% select(Rooms,AvgPriceRoom)

colnames(roomDataFull) = c("No.of.Rooms","Price")

datatable(roomDataFull, style="bootstrap", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))

ggplot(roomData, aes(x = Rooms,y = AvgPricePerRoom)) +
  scale_x_continuous(breaks=c(0,2,4,6,8,10,12,14,16,18,20)) +
  geom_bar(stat='identity',colour="white", fill = fillColorRoom) +
  labs(x = 'No. of.Room(s)', y = 'Price', title = 'Price and  Rooms') +
  theme_bw()
  
  
melData <- melData %>% 
  mutate(month_of_year = month(dmy(Date)))

melData <- melData %>% 
  mutate(yearOfSale = year(dmy(Date)))

transformdata = melData %>% filter(!is.na(Price)) %>%
                select(-c(Lattitude,Longtitude,Date,Address))

features <- colnames(transformdata)

for (f in features) {
  if ((class(transformdata[[f]])=="factor") || (class(transformdata[[f]])=="character")) {
    levels <- unique(transformdata[[f]])
    transformdata[[f]] <- as.numeric(factor(transformdata[[f]], levels=levels))
  }
}

formula = Price ~ .

fitControl <- trainControl(method="none")

xgbGrid <- expand.grid(nrounds = 500,
                       max_depth = 3,
                       eta = .05,
                       gamma = 0,
                       colsample_bytree = .8,
                       min_child_weight = 1,
                       subsample = 1)


set.seed(13)

melDataXGB = train(formula, data = transformdata,
                       method = "xgbTree",trControl = fitControl,
                       tuneGrid = xgbGrid,na.action = na.pass,metric="RMSE")

importance = varImp(melDataXGB)



varImportance <- data.frame(Variables = row.names(importance[[1]]), 
                            Importance = round(importance[[1]]$Overall,2))

# Create a rank variable based on importance
rankImportance <- varImportance %>%
  mutate(Rank = paste0('#',dense_rank(desc(Importance))))

rankImportancefull = rankImportance

ggplot(rankImportance, aes(x = reorder(Variables, Importance), 
                           y = Importance)) +
  geom_bar(stat='identity',colour="white", fill = fillColor) +
  geom_text(aes(x = Variables, y = 1, label = Rank),
            hjust=0, vjust=.5, size = 4, colour = 'black',
            fontface = 'bold') +
  labs(x = 'Variables', title = 'Relative Variable Importance') +
  coord_flip() + 
  theme_bw()


TypeData = melData %>% filter(!is.na(Price)) %>%
  group_by(Type) %>% 
  summarise(AvgPricePerType  = round(median(Price),0)) %>%
  arrange(desc(AvgPricePerType ))

TypeData$AvgPriceType = scales::dollar(TypeData$AvgPricePerType )

TypeDataFull =TypeData %>% select(Type,AvgPriceType)
ggplot(TypeData, aes(x = Type,y = AvgPricePerType )) +
  geom_bar(stat='identity',colour="white", fill = fillColorRoom) +
  labs(x = 'Type', y = 'Price', title = 'Price and  Type') +
  theme_bw()
  
melData %>% filter(!is.na(Price)) %>% filter(!is.na(BuildingArea)) %>% 
ggplot(aes(x=BuildingArea,y=Price))+
  geom_point()+
  scale_x_continuous(limits=c(0,1000)) +
  stat_smooth(aes(x=BuildingArea,y=Price),method="lm", color="red")+
  theme_bw()+
  theme(axis.title = element_text(size=16),axis.text = element_text(size=14))+
  xlab("(BuildingArea)")+
  ylab("Price")
  
  
bathroomData = melData %>% filter(!is.na(Price)) %>%
  group_by(Bathroom) %>% 
  summarise(AvgPricePerRoom = round(median(Price),0)) %>%
  arrange(desc(AvgPricePerRoom))

bathroomData$AvgPriceRoom = scales::dollar(bathroomData$AvgPricePerRoom)

bathroomDataFull =bathroomData %>% select(Bathroom,AvgPriceRoom)

colnames(bathroomDataFull) = c("Bathroom","Average House Price")

datatable(bathroomDataFull, style="bootstrap", class="table-condensed", options = list(dom = 'tp',scrollX = TRUE))

ggplot(bathroomData, aes(x = Bathroom,y = AvgPricePerRoom)) +
  scale_x_continuous(breaks=c(0,2,4,6,8,10)) +
  geom_bar(stat='identity',colour="white", fill = fillColorRoom) +
  labs(x = 'No. of.Bathroom(s)', y = 'Price', title = 'Price and  Bath Rooms') +
  theme_bw()

d <- lm(Price ~ log2(Rooms) + (!is.na(Landsize)) + (!is.na(Suburb)) + Type +(!is.na(Regionname))+ (!is.na(CouncilArea)), melhousing)
d
cross_validation <- function(formula,data,n)
{
  rmse1 <- crossv_kfold(data = data,n) %>%
    mutate(fit=map(train,~lm(formula,data = .)))%>%
    mutate(rmsevalues=map2_dbl(fit,test,rmse))
  avg_rmse <- mean(rmse1$rmsevalues)
  return(avg_rmse)
}

set.seed(1)
error1 <- cross_validation(log2(Price) ~ log2(Rooms) + (!is.na(Landsize)) + (!is.na(Suburb)) + Type +(!is.na(Regionname))+ (!is.na(CouncilArea)) , data=HousingData, n=5)
print(error1)

c <- dplyr::filter(HousingData,  !is.na(Price)) #Removed null values from original Dataset from Price column
d <- select(c,Price) #selected price column
e <- log(d) #took log transformation because our fitted price is in log transformation in our model
y <- fitted(fit) # stored fitted values in y
y1 <- as.tibble(y) #converted to tibble
e1 <- tibble::rowid_to_column(e, "ID") #given index as ID for ease of joining
y2 <- tibble::rowid_to_column(y1, "ID") #given index as ID for ease of joining
compare_prices <- inner_join(e1,y2, by = "ID") #did inner join to show that we are not missing anyt values
#compare_prices %>% select(-ID) %>% summarise_all(funs(mean))
compare_prices1 <- rename(compare_prices, Old_Price= Price, Predicted_Price = value) #rename column names for ease of understanding
ggplot(compare_prices1, aes(Old_Price, Predicted_Price)) +
     geom_point() +
     geom_smooth() #plotted the trend of old price vs predicted price
compare_prices1 %>% select(-ID) %>% summarise_all(funs(mean)) # Average of old price and predicted price


ggplot(HousingData, aes(as.factor(Regionname), log2(Price))) + geom_boxplot()

ggplot(HousingData, aes(log2(Rooms), log2(Price))) + geom_point(alpha = 0.5)

ggplot(HousingData, aes(as.factor(Type), log2(Price))) + geom_boxplot()

ggplot(HousingData, aes(SellerG, log2(Price))) + geom_boxplot()

ggplot(HousingData, aes(as.factor(CouncilArea), log2(Price))) + geom_boxplot()

ggplot(HousingData, aes(log2(BuildingArea), log2(Price))) + geom_point(alpha = 0.5)

ggplot(HousingData, aes(log2(Landsize), log2(Price))) + geom_point(alpha = 0.5)

fit <- lm(log2(Price) ~ log2(Rooms) + SellerG + (!is.na(Landsize)) + (!is.na(Suburb)) + Type +(!is.na(Regionname))+ (!is.na(CouncilArea)) , data=HousingData)

print(fit)
